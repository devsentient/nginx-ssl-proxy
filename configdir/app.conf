limit_req_zone $binary_remote_addr zone=rpclimit:10m rate=100r/s;

server {
	listen 443 ssl;
	server_name xyz2.hyperplane.dev *.xyz2.hyperplane.dev;
	ssl_certificate /etc/nginx/certs/cert.crt;
	ssl_certificate_key /etc/nginx/certs/cert.key;

	location / {
		#burst is the size of the request queue, should probably
		#be a few times larger than the zone per-second rate
		limit_req zone=rpclimit burst=400;
		proxy_pass http://host.docker.internal:8899/;
		proxy_read_timeout 60;
		proxy_buffering off;
	}
}

upstream websocket{
	server host.docker.internal:8900;
}

map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
}

server {
	error_log /var/log/nginx/error.log info;
	listen 7900;
	ssl on;
	server_name _;
	ssl_certificate /etc/nginx/certs/cert.crt;
	ssl_certificate_key /etc/nginx/certs/cert.key;
	location / {
		proxy_pass http://websocket;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		proxy_cache_bypass $http_upgrade;
		proxy_buffering off;
		proxy_ignore_client_abort off;	
	}
}
